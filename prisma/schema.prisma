// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    tasksLists    TaskList[]
    tasks         Task[]
    tags          Tag[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model TaskList {
    id          String      @id @default(cuid())
    userId      String
    owner       User        @relation(fields: [userId], references: [id])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    title       String
    colour      String      @db.Char(6)
    tasks       Task[]

    @@index([userId])
}

model Task {
    id          Int         @id @default(autoincrement())
    listId      String?
    userId      String
    owner       User        @relation(fields: [userId], references: [id])
    list        TaskList?   @relation(fields: [listId], references: [id])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    title       String
    description String      @db.Text
    importance  Int         @db.UnsignedTinyInt @default(0)
    due         DateTime?
    tags        Tag[]
    complete    Boolean     @default(false)
    
    projectId   String?
    project     Project?    @relation(fields: [projectId], references: [id])

    @@index([listId])
    @@index([projectId])
    @@index([userId])
}

model Tag {
    id          String      @id @default(cuid())
    userId      String
    owner       User        @relation(fields: [userId], references: [id])
    name        String
    colour      String      @db.Char(6)
    tasks       Task[]

    @@index([userId])
}

model Project {
    id          String      @id @default(cuid())
    name        String
    description String      @db.Text
    due         DateTime
    tasks       Task[]
    complete    Boolean     @default(false)
}
